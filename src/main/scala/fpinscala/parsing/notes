Laws for the Parser algebra:

// Char
run(char(c))(c.toString) == Right(c)

// String
run(string(s))(s) == Right(s)

// or (|)
// | is a commutative operator thus. Note: This might have impact on the way the return
// value is or has to be reported
or(string(s1), string(s2)) == or(string(s2), string(s1))
run(or(string(s1), string(s2))) == run(or(string(s2), string(s1)))
or(string(s), string(s)) == string(s)
// The below rule follows from the fact that I defined 'or' to be commutative. It does
not matter whether which of the components is parsed first
or(or(string(s1), string(s2)), string(s3)) == or(string(s1), or(string(s2), string(s3)))
run(or(string(s1), string(s2)))(s1) == Right(s1)
run(or(string(s1), string(s2)))(s2) == Right(s2)

// listOfN
run(listOfN(3, s1 | s2))(s1+s1+s2) == Right(s1+s1+s2)
run(listOfN(3, s1 | s2))(s2+s1+s1) == Right(s2+s1+s1)
run(listOfN(3, s1 | s2))(s1+s1+s1) == Right(s1+s1+s1)

// and (&)
and(string(s1), string(s2)) == string(s1 + s2)
run(and(string("s1"), string("s2")))("") == Left(ParseError)
run(and(string(s1), string(s2)))(s1) == Left(ParseError)
run(and(string(s1), string(s2)))(s2) == Left(ParseError)

// repeat (*) / repeat1 (+) repeat1 should be implemented using repeat, as it's a special case of repeat
run(repeat('a')("") == Right(0))
run(repeat('a')("a") == Right(1)
run(repeat('a')("aaaaa") == Right(5)

run(repeat1('a')("") == Left(ParseError)
run(repeat1('a')("a") == Right(1)
run(repeat1('a')("aaaaa") == Right(5)


// repeatTuple
run(repeatTuple('a', 'b')("bbb") == Right((0,3)
run(repeatTuple('a', 'b')("aaaab") == Right((4,1)
run(repeatTuple('a', 'b')("qre") == Right((0,0)

Error reporting in running repeat1 would have to be implemented by throwing exceptions to exit execution,
and jump to returning a ParseError when not at least 1 is found.
Could the API support giving an explicit error message like "Expected one or more 'a" in case of failure?
- We would require a way to extract the textual representation of a Parser[A], to in this case convert
the Parser[Char] -> 'a' for error reporting.
- We would require a way to catch exceptional cases when running a Parser. This could be done by throwing
an Exception for example, then running a Parser would have to catch (all) Exceptions.

// map is a function that retains the result of running a Parser. A failing parser still fails, a successful one succeeds
// The result of a successful parser is transformed by a function A => B
map(p)(a => a) == p

// slice, parses a string and returns the portion of the string it matches
run(slice(many(or('a','b'))))("aaabb") == Right("aaabb")

// product is associative
run(product(string(s1), product(string(s2), string(s3)))(s) == run(product(product(string(s1), string(s2)), string(s3)))(s)
// The order of mapping and product doesn't matter for the result of the parser
run(map(product(string(s1), string(s2)))(f))(s) == run(product(map(string(s1)(f)), map(string(s2))(f)))(s)

// 9.5 Dealing with non-strictness can also be done by introducing an combinator like "fork" that returns
a non-strict parser by providing it a Parser.
In the case of product we assume that the first parser succeeds, if the first does not succeed, it will fail
and the second parser will not be evaluated. From this perspective it only makes sense to make the second
parser non-strict. The API defines product as the primitive, hence map2 will automatically use the same.

// 9.10 a.
Given parser "abra".**(" ".many).**("cadabra") and input "abra cAdabra" I would like to report
an error message like: "Error parsing 'cadabra', error occured on input: 'abra cAdabra'"
                                                                                ^
The above requires to store the location of while parsing, so the error location can be highlighted.
// 9.10 b.
Given parser "a or b" it does not make sense to run the second parser if the first parser fails
on parsing a particular type. Parser a and Parser b have the same type, so the second would also fail.
// 9.10 c.
The location of error can be reported by keeping an integer index when running a Parser. The parser
run method could internally keep the index.
Or we could keep the parsed part of the string as part of the parser. parser.slice should return
the parsed input of a parser. The string passed to run is only the remaining part of what needs
to be parsed. Knowing the parser, what is parsed, and what needs to be parsed is enough to
report the location of an error.
